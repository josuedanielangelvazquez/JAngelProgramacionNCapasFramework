using System;using System.Collections.Generic;using System.Linq;using System.Text;using System.Threading.Tasks;using System.Data;using System.Data.SqlClient;namespace BL{    public class Usuario    {        static public ML.Result Add(ML.Usuario usuario)        {            ML.Result result = new ML.Result();            try            {                using (SqlConnection context = new SqlConnection(DL.Conexion.Get()))                {                    SqlCommand cmd = new SqlCommand();                    cmd.Connection = context;                    cmd.CommandText = "INSERT INTO [Usuario]([Nombre],[ApellidoPaterno],[ApellidoMaterno]) VALUES (@nombre,@apellidoPaterno,@apellidoMaterno)";                    SqlParameter[] collection = new SqlParameter[3];                    collection[0] = new SqlParameter("nombre", SqlDbType.VarChar);                    collection[0].Value = usuario.Nombre;                    collection[1] = new SqlParameter("apellidoPaterno", SqlDbType.VarChar);                    collection[1].Value = usuario.ApellidoPaterno;                    collection[2] = new SqlParameter("apellidomaterno", SqlDbType.VarChar);                    collection[2].Value = usuario.ApellidoMaterno;                    cmd.Parameters.AddRange(collection);                    cmd.Connection.Open();                    int RowsAffected = cmd.ExecuteNonQuery();                    if (RowsAffected > 0)                    {                        result.Correct = true;                    }                    else                    {                        result.Correct = false;                        result.ErrorMessage = "Error";                    }                }            }            catch (Exception ex)            {                result.Correct = false;                result.ErrorMessage = "Error";                result.Ex = ex;            }            {            }            return result;        }        static public ML.Result Read()        {            ML.Result result = new ML.Result();            try            {                using (SqlConnection context = new SqlConnection(DL.Conexion.Get()))                {                    SqlCommand cmd = new SqlCommand();                    cmd.Connection = context;                    cmd.CommandText = "SELECT [IdUsuario],[Nombre],[ApellidoPaterno],[ApellidoMaterno],[Grupo] FROM [Usuario]";                    SqlDataAdapter da = new SqlDataAdapter(cmd);                    DataTable usuarioTable = new DataTable();                    da.Fill(usuarioTable);                    if (usuarioTable.Rows.Count > 0)                    {                        result.Objects = new List<object>();                        foreach (DataRow row in usuarioTable.Rows)                        {                            ML.Usuario usuario = new ML.Usuario();                            usuario.IdUsuario = int.Parse(row[0].ToString());                            usuario.Nombre = row[1].ToString();                            usuario.ApellidoPaterno = row[2].ToString();                            usuario.ApellidoMaterno = row[3].ToString();                            usuario.grupo = int.Parse(row[4].ToString());                            result.Objects.Add(usuario);                        }                        result.Correct = true;                    }                    else                    {                        result.Correct = false;                        result.ErrorMessage = "No contiene registros la tabla usuario";                    }                }            }            catch (Exception ex)            {                result.Correct = false;                result.ErrorMessage = ex.Message;                result.Ex = ex;            }            return result;        }        static public ML.Result UPDATE(ML.Usuario usuario)        {            ML.Result result = new ML.Result();            try            {                using (SqlConnection context = new SqlConnection(DL.Conexion.Get()))                {                    SqlCommand cmd = new SqlCommand();                    cmd.Connection = context;                    cmd.CommandText = "update[Usuario] set [Nombre] = @nombre,[ApellidoPaterno] = @apellidoPaterno ,[ApellidoMaterno] = @apellidoMaterno ,[Grupo] = @grupo where [Idusuario] = @usuarioId";                    SqlParameter[] collection = new SqlParameter[5];                    collection[0] = new SqlParameter("usuarioId", SqlDbType.Int);                    collection[0].Value = usuario.IdUsuario;                    collection[1] = new SqlParameter("nombre", SqlDbType.VarChar);                    collection[1].Value = usuario.Nombre;                    collection[2] = new SqlParameter("apellidoPaterno", SqlDbType.VarChar);                    collection[2].Value = usuario.ApellidoPaterno;                    collection[3] = new SqlParameter("apellidomaterno", SqlDbType.VarChar);                    collection[3].Value = usuario.ApellidoMaterno;                    collection[4] = new SqlParameter("grupo", SqlDbType.Int);                    collection[4].Value = usuario.grupo;                    cmd.Parameters.AddRange(collection);                    cmd.Connection.Open();                    int RowsAffected = cmd.ExecuteNonQuery();                    if (RowsAffected > 0)                    {                        result.Correct = true;                    }                    else                    {                        result.Correct = false;                        result.ErrorMessage = "Error";                    }                }            }            catch (Exception ex)            {                result.Correct = false;                result.ErrorMessage = ex.Message;                result.Ex = ex;            }            {            }            return result;        }        static public ML.Result DELETE(int idusuario)        {            ML.Result result = new ML.Result();            try            {                using (SqlConnection context = new SqlConnection(DL.Conexion.Get()))                {                    SqlCommand cmd = new SqlCommand();                    cmd.Connection = context;                    cmd.CommandText = "DELETE FROM [usuarios] WHERE [IdUsuario] = " + idusuario;                    cmd.Connection.Open();                    int RowsAffected = cmd.ExecuteNonQuery();                    if (RowsAffected > 0)                    {                        result.Correct = true;                    }                    else                    {                        result.Correct = false;                        result.ErrorMessage = "Error";                    }                }            }            catch (Exception ex)            {                result.Correct = false;                result.ErrorMessage = ex.Message;                result.Ex = ex;            }            return result;        }        static public ML.Result GetById(int Idusuario)        {            ML.Result result = new ML.Result();            using (SqlConnection context = new SqlConnection(DL.Conexion.Get()))            {                SqlCommand cmd = new SqlCommand();                cmd.Connection = context;                cmd.CommandText = "SELECT [IdUsuario],[Nombre],[ApellidoPaterno],[ApellidoMaterno] FROM [Usuario] WHERE [IdUsuario] = @IdUsuario";                SqlParameter[] collection = new SqlParameter[1];                collection[0] = new SqlParameter("IdUsuario", SqlDbType.Int);                collection[0].Value = Idusuario;                cmd.Parameters.AddRange(collection);                SqlDataAdapter da = new SqlDataAdapter(cmd);                DataTable usuarioTable = new DataTable();                da.Fill(usuarioTable);                if (usuarioTable.Rows.Count > 0)                {                    DataRow row = usuarioTable.Rows[0];                    ML.Usuario usuario = new ML.Usuario();                    usuario.IdUsuario = int.Parse(row[0].ToString());                    usuario.Nombre = row[1].ToString();                    usuario.ApellidoPaterno = row[2].ToString();                    usuario.ApellidoMaterno = row[3].ToString();                    result.Object = usuario;                    result.Correct = true;                }                else                {                    result.Correct = false;                    result.ErrorMessage = "Error";                }            }            return result;        }        static public ML.Result GetByIdsp(int IdUsuario)        {            ML.Result result = new ML.Result();            try            {                using (SqlConnection context = new SqlConnection(DL.Conexion.Get()))                {                    SqlCommand cmd = new SqlCommand();                    cmd.Connection = context;                    cmd.CommandText = "GetById";                    cmd.CommandType = CommandType.StoredProcedure;                    SqlParameter[] collection = new SqlParameter[1];                    collection[0] = new SqlParameter("IdUsuario", SqlDbType.Int);                    collection[0].Value = IdUsuario;                    cmd.Parameters.AddRange(collection);                    SqlDataAdapter da = new SqlDataAdapter(cmd);                    DataTable usuarioTable = new DataTable();                    da.Fill(usuarioTable);                    if (usuarioTable.Rows.Count > 0)                    {                        DataRow row = usuarioTable.Rows[0];                        ML.Usuario usuario = new ML.Usuario();                        usuario.IdUsuario = int.Parse(row[0].ToString());                        usuario.Nombre = row[1].ToString();                        usuario.ApellidoPaterno = row[2].ToString();                        usuario.ApellidoMaterno = row[3].ToString();                        result.Object = usuario; //BOXING

                        result.Correct = true;                    }                    else                    {                        result.Correct = false;                        result.ErrorMessage = "No contiene registros la tabla usuario";                    }                }
            }
            catch (Exception ex)            {                result.Correct = false;                result.ErrorMessage = ex.Message;                result.Ex = ex;            }            return result;        }        static public ML.Result GetSP()        {            ML.Result result = new ML.Result();            try            {                using (SqlConnection context = new SqlConnection(DL.Conexion.Get()))                {                    SqlCommand cmd = new SqlCommand();                    cmd.Connection = context;                    cmd.CommandText = "UsuarioRead";                    cmd.CommandType = CommandType.StoredProcedure;                    SqlDataAdapter da = new SqlDataAdapter(cmd);                    DataTable usuarioTable = new DataTable();                    da.Fill(usuarioTable);                    if (usuarioTable.Rows.Count > 0)                    {                        result.Objects = new List<object>();                        foreach (DataRow row in usuarioTable.Rows)                        {                            ML.Usuario usuario = new ML.Usuario();                            usuario.IdUsuario = int.Parse(row[0].ToString());                            usuario.Nombre = row[2].ToString();                            usuario.ApellidoPaterno = row[3].ToString();                            usuario.ApellidoMaterno = row[4].ToString();                            result.Objects.Add(usuario);                        }                        result.Correct = true;


                    }                    else                    {                        result.Correct = false;                        result.ErrorMessage = "Error";                    }                }            }            catch (Exception ex)            {                result.Correct = false;                result.ErrorMessage = ex.Message;                result.Ex = ex;            }            return result;        }        static public ML.Result AddSP(ML.Usuario usuario)        {            ML.Result result = new ML.Result();            try            {                using (SqlConnection context = new SqlConnection(DL.Conexion.Get()))                {                    SqlCommand cmd = new SqlCommand();                    cmd.Connection = context;                    cmd.CommandText = "UsuarioInsert";                    cmd.CommandType = CommandType.StoredProcedure;                    SqlParameter[] collection = new SqlParameter[11];                    collection[0] = new SqlParameter("UserName", SqlDbType.VarChar);                    collection[0].Value = usuario.UserName;                    collection[1] = new SqlParameter("Nombre", SqlDbType.VarChar);                    collection[1].Value = usuario.Nombre;                    collection[2] = new SqlParameter("ApellidoPaterno", SqlDbType.VarChar);                    collection[2].Value = usuario.ApellidoPaterno;                    collection[3] = new SqlParameter("Apellidomaterno", SqlDbType.VarChar);                    collection[3].Value = usuario.ApellidoMaterno;                    collection[4] = new SqlParameter("Email", SqlDbType.VarChar);                    collection[4].Value = usuario.Email;                    collection[5] = new SqlParameter("Password", SqlDbType.VarChar);                    collection[5].Value = usuario.Password;                    collection[6] = new SqlParameter("FechaNacimiento", SqlDbType.DateTime);                    collection[6].Value = usuario.FechaNacimiento;                    collection[7] = new SqlParameter("Sexo", SqlDbType.Char);                    collection[7].Value = usuario.Sexo;                    collection[8] = new SqlParameter("Telefono", SqlDbType.VarChar);                    collection[8].Value = usuario.Telefono;                    collection[9] = new SqlParameter("Celular", SqlDbType.VarChar);                    collection[9].Value = usuario.Celular;                    collection[10] = new SqlParameter("Curp", SqlDbType.VarChar);                    collection[10].Value = usuario.Curp;


                    cmd.Parameters.AddRange(collection);                    cmd.Connection.Open();                    int RowsAffected = cmd.ExecuteNonQuery();                    if (RowsAffected > 0)                    {                        result.Correct = true;                    }                    else                    {                        result.Correct = false;                        result.ErrorMessage = "Error";                    }                }            }            catch (Exception ex)            {                result.Correct = false;
                result.ErrorMessage = "Error";            }


            return result;        }        static public ML.Result UPDATESP(ML.Usuario usuario)        {            ML.Result result = new ML.Result();            try            {                using (SqlConnection context = new SqlConnection(DL.Conexion.Get()))                {                    SqlCommand cmd = new SqlCommand();                    cmd.Connection = context;                    cmd.CommandText = "UsuarioUpdate";                    cmd.CommandType = CommandType.StoredProcedure;                    SqlParameter[] collection = new SqlParameter[12];                    collection[0] = new SqlParameter("IdUsuario", SqlDbType.Int);                    collection[0].Value = usuario.IdUsuario;                    collection[1] = new SqlParameter("UserName", SqlDbType.VarChar);                    collection[1].Value = usuario.UserName;                    collection[2] = new SqlParameter("Nombre", SqlDbType.VarChar);                    collection[2].Value = usuario.Nombre;                    collection[3] = new SqlParameter("ApellidoPaterno", SqlDbType.VarChar);                    collection[3].Value = usuario.ApellidoPaterno;                    collection[4] = new SqlParameter("Apellidomaterno", SqlDbType.VarChar);                    collection[4].Value = usuario.ApellidoMaterno;                    collection[5] = new SqlParameter("Email", SqlDbType.VarChar);                    collection[5].Value = usuario.Email;                    collection[6] = new SqlParameter("Password", SqlDbType.VarChar);                    collection[6].Value = usuario.Password;                    collection[7] = new SqlParameter("FechaNacimiento", SqlDbType.DateTime);                    collection[7].Value = usuario.FechaNacimiento;                    collection[8] = new SqlParameter("Sexo", SqlDbType.Char);                    collection[8].Value = usuario.Sexo;                    collection[9] = new SqlParameter("Telefono", SqlDbType.VarChar);                    collection[9].Value = usuario.Telefono;                    collection[10] = new SqlParameter("Celular", SqlDbType.VarChar);                    collection[10].Value = usuario.Celular;                    collection[11] = new SqlParameter("Curp", SqlDbType.VarChar);                    collection[11].Value = usuario.Curp;                    cmd.Parameters.AddRange(collection);                    cmd.Connection.Open();                    int RowsAffected = cmd.ExecuteNonQuery();                    if (RowsAffected > 0)                    {                        result.Correct = true;                    }                    else                    {                        result.Correct = false;                        result.ErrorMessage = "Error";                    }                }            }            catch (Exception ex)            {                result.Correct = false;                result.ErrorMessage = ex.Message;                result.Ex = ex;            }            {            }            return result;        }        static public ML.Result DELETESP(int idusuario)        {            ML.Result result = new ML.Result();            try            {                using (SqlConnection context = new SqlConnection(DL.Conexion.Get()))                {                    SqlCommand cmd = new SqlCommand();                    cmd.Connection = context;                    cmd.CommandText = "UsuarioDelete";                    cmd.CommandType = CommandType.StoredProcedure;                    SqlParameter[] collection = new SqlParameter[1];                    collection[0] = new SqlParameter("IdUsuario", SqlDbType.Int);                    collection[0].Value = idusuario;                    cmd.Parameters.AddRange(collection);                    SqlDataAdapter da = new SqlDataAdapter(cmd);                    cmd.Connection.Open();                    int RowsAffected = cmd.ExecuteNonQuery();                    if (RowsAffected > 0)                    {                        result.Correct = true;                    }                    else                    {                        result.Correct = false;                        result.ErrorMessage = "Error";                    }                }            }            catch (Exception ex)            {                result.Correct = false;                result.ErrorMessage = ex.Message;                result.Ex = ex;            }            return result;        }        static public ML.Result AddEF(ML.Direccion usuario)        {
            ML.Result result = new ML.Result();            try            {                using (DL_EF.ProgramacionNCapasEntities context = new DL_EF.ProgramacionNCapasEntities())                {

                    var query = context.UsuarioInsert(usuario.IdUsuario.UserName, usuario.IdUsuario.Nombre, usuario.IdUsuario.ApellidoPaterno, usuario.IdUsuario.ApellidoMaterno, usuario.IdUsuario.Email,                        usuario.IdUsuario.Password, usuario.IdUsuario.FechaNacimiento, usuario.IdUsuario.Sexo, usuario.IdUsuario.Telefono, usuario.IdUsuario.Celular, usuario.IdUsuario.Curp, usuario.IdUsuario.RolId,                        usuario.Calle, usuario.NumeroInterior, usuario.NumeroExterior, usuario.ColoniaId);                    if (query > 0)                    {                        result.Correct = true;                    }                    else                    {                        result.Correct = false;                        result.ErrorMessage = "Ocurrio un error al insertar eln usuario";                    }                }            }            catch (Exception ex)            {                result.Correct = false;                result.ErrorMessage = ex.Message;                result.Ex = ex;            }            return result;
        }

        static public ML.Result GetAllEF()        {            ML.Result result = new ML.Result();            try            {                using (DL_EF.ProgramacionNCapasEntities context = new DL_EF.ProgramacionNCapasEntities())                {                    var query = context.UsuarioRead().ToList();                    if (query != null)                    {                        result.Objects = new List<object>();                        foreach (var objusuario in query)                        {                            ML.Usuario usuario = new ML.Usuario();
                            //usuario.IdUsuario = objusuario;
                            usuario.UserName = objusuario.UserName;                            usuario.Nombre = objusuario.Nombre;                            usuario.ApellidoPaterno = objusuario.ApellidoPaterno;                            usuario.ApellidoMaterno = objusuario.ApellidoMaterno;                            usuario.Email = objusuario.Email;                            usuario.Password = objusuario.Password;                            usuario.FechaNacimiento = objusuario.FechaNacimiento;                            usuario.Sexo = objusuario.Sexo;                            usuario.Telefono = objusuario.Telefono;                            usuario.Celular = objusuario.Celular;                            usuario.Curp = objusuario.Curp;                            result.Objects.Add(usuario);                        }                        result.Correct = true;                    }                    else                    {                        result.Correct = false;                        result.ErrorMessage = "No contiene registros la tabla usuario";                    }                }            }            catch (Exception ex)            {                result.Correct = false;                result.ErrorMessage = ex.Message;                result.Ex = ex;            }            return result;        }        static public ML.Result UpdateEF(ML.Direccion usuario)        {            ML.Result result = new ML.Result();            try            {                using (DL_EF.ProgramacionNCapasEntities context = new DL_EF.ProgramacionNCapasEntities())                {                    var query = context.UsuarioUpdate(usuario.IdUsuario.IdUsuario, usuario.IdUsuario.UserName, usuario.IdUsuario.Nombre, usuario.IdUsuario.ApellidoPaterno, usuario.IdUsuario.ApellidoMaterno, usuario.IdUsuario.Email,                        usuario.IdUsuario.Password, usuario.IdUsuario.FechaNacimiento, usuario.IdUsuario.Sexo, usuario.IdUsuario.Telefono, usuario.IdUsuario.Celular, usuario.IdUsuario.Curp, usuario.IdUsuario.RolId,                        usuario.Calle, usuario.NumeroInterior, usuario.NumeroExterior, usuario.ColoniaId);                    if (query > 0)                    {                        result.Correct = true;                    }                    else                    {                        result.Correct = false;                        result.ErrorMessage = "Ocurrio un error al actualizar el usuario";                    }                }            }            catch (Exception ex)            {                result.Correct = false;                result.ErrorMessage = ex.Message;                result.Ex = ex;            }            return result;        }        static public ML.Result DELETEEF(int IdUsuario)        {            ML.Result result = new ML.Result();            try            {                using (DL_EF.ProgramacionNCapasEntities context = new DL_EF.ProgramacionNCapasEntities())                {                    var query = context.UsuarioDelete(IdUsuario);                    if (query > 0)                    {                        result.Correct = true;                    }                    else                    {                        result.Correct = false;                        result.ErrorMessage = "Ocurrio un error al actualizar el usuario";                    }                }            }            catch (Exception ex)            {                result.Correct = false;                result.ErrorMessage = ex.Message;                result.Ex = ex;            }            return result;        }        static public ML.Result GETBYIDEF(int IdUsuario)        {            ML.Result result = new ML.Result();            try            {                using (DL_EF.ProgramacionNCapasEntities context = new DL_EF.ProgramacionNCapasEntities())                {                    var objusuario = context.GetById(IdUsuario).Single();

                    result.Object = new List<object>();                    if (objusuario != null)                    {                        ML.Usuario usuario = new ML.Usuario();

                        usuario.UserName = objusuario.UserName;
                        usuario.Nombre = objusuario.Nombre;
                        usuario.ApellidoPaterno = objusuario.ApellidoPaterno;
                        usuario.ApellidoMaterno = objusuario.ApellidoMaterno;
                        usuario.Email = objusuario.Email;
                        usuario.Password = objusuario.Password;
                        usuario.FechaNacimiento = objusuario.FechaNacimiento;
                        usuario.Sexo = objusuario.Sexo;
                        usuario.Telefono = objusuario.Telefono;
                        usuario.Celular = objusuario.Celular;
                        usuario.Curp = objusuario.Curp;                        result.Object = usuario;

                        result.Correct = true;                    }                    else                    {                        result.Correct = false;                        result.ErrorMessage = "Ocurrio un error al actualizar el usuario";                    }                }            }            catch (Exception ex)            {                result.Correct = false;                result.ErrorMessage = ex.Message;                result.Ex = ex;            }            return result;        }        static public ML.Result GETALLLINQ()        {            ML.Result result = new ML.Result();            try            {                using (DL_EF.ProgramacionNCapasEntities context = new DL_EF.ProgramacionNCapasEntities())                {                    var query = (from Usuario in context.Usuarios select Usuario).ToList();                    if (query != null)                    {                        result.Objects = new List<object>();                        foreach (var objusuario in query)                        {                            ML.Usuario usuario = new ML.Usuario();                            usuario.IdUsuario = objusuario.IdUsuario;                            usuario.UserName = objusuario.UserName;                            usuario.Nombre = objusuario.Nombre;                            usuario.ApellidoPaterno = objusuario.ApellidoPaterno;                            usuario.ApellidoMaterno = objusuario.ApellidoMaterno;                            usuario.Email = objusuario.Email;                            usuario.Password = objusuario.Password;                            usuario.FechaNacimiento = objusuario.FechaNacimiento;                            usuario.Sexo = objusuario.Sexo;                            usuario.Telefono = objusuario.Telefono;                            usuario.Celular = objusuario.Celular;                            usuario.Curp = objusuario.Curp;                            result.Objects.Add(usuario);                        }                        result.Correct = true;                    }                    else                    {                        result.Correct = false;                        result.ErrorMessage = "No contiene registros la tabla usuario";                    }                }            }            catch (Exception ex)            {                result.Correct = false;                result.ErrorMessage = ex.Message;                result.Ex = ex;            }            return result;        }        static public ML.Result GETBYIDLINQ(int IdUsuario)        {            ML.Result result = new ML.Result();            try            {                using (DL_EF.ProgramacionNCapasEntities context = new DL_EF.ProgramacionNCapasEntities())                {                    var objusuario = (from Usuario in context.Usuarios where Usuario.IdUsuario == IdUsuario select Usuario).Single();                    result.Object = new List<object>();                    if (objusuario != null)                    {                        ML.Usuario usuario = new ML.Usuario();                        usuario.UserName = objusuario.UserName;                        usuario.Nombre = objusuario.Nombre;                        usuario.ApellidoPaterno = objusuario.ApellidoPaterno;                        usuario.ApellidoMaterno = objusuario.ApellidoMaterno;                        usuario.Email = objusuario.Email;                        usuario.Password = objusuario.Password;                        usuario.FechaNacimiento = objusuario.FechaNacimiento;                        usuario.Sexo = objusuario.Sexo;                        usuario.Telefono = objusuario.Telefono;                        usuario.Celular = objusuario.Celular;                        usuario.Curp = objusuario.Curp;                        result.Object = usuario;                        result.Correct = true;                    }                    else                    {                        result.Correct = false;                        result.ErrorMessage = "Ocurrio un error al actualizar el usuario";                    }                }            }            catch (Exception ex)            {                result.Correct = false;                result.ErrorMessage = ex.Message;                result.Ex = ex;            }            return result;        }        static public ML.Result ADDLINQ(ML.Usuario usuario)        {            ML.Result result = new ML.Result();            try            {                using (DL_EF.ProgramacionNCapasEntities context = new DL_EF.ProgramacionNCapasEntities())                {                    DL_EF.Usuario usuarioD = new DL_EF.Usuario();

                    usuarioD.UserName = usuario.UserName;                    usuarioD.Nombre = usuario.Nombre;                    usuarioD.ApellidoPaterno = usuario.ApellidoPaterno;                    usuarioD.ApellidoMaterno = usuario.ApellidoMaterno;                    usuarioD.Email = usuario.Email;                    usuarioD.Password = usuario.Password;                    usuarioD.FechaNacimiento = usuario.FechaNacimiento;                    usuarioD.Sexo = usuario.Sexo;
                    usuarioD.Telefono = usuario.Telefono;                    usuarioD.Celular = usuario.Celular;                    usuario.Curp = usuario.Curp;                    context.Usuarios.Add(usuarioD);                    int rowsafected = context.SaveChanges();                    if (rowsafected > 0)                    {                        result.Correct = true;                    }                    else                    {                        result.Correct = false;                        result.ErrorMessage = "Algo Fallo";                    }                }            }            catch (Exception ex)            {                result.Correct = false;                result.ErrorMessage = ex.Message;                result.Ex = ex;            }            return result;        }        static public ML.Result UPDATELINQ(ML.Usuario usuario)        {            ML.Result result = new ML.Result();            try            {                using (DL_EF.ProgramacionNCapasEntities context = new DL_EF.ProgramacionNCapasEntities())                {                    var query = (from Usuario in context.Usuarios where Usuario.IdUsuario == usuario.IdUsuario select Usuario).Single();                    if (query != null)                    {                        query.UserName = usuario.UserName;                        query.Nombre = usuario.Nombre;                        query.ApellidoPaterno = usuario.ApellidoPaterno;                        query.ApellidoMaterno = usuario.ApellidoMaterno;                        query.Email = usuario.Email;                        query.Password = usuario.Password;                        query.FechaNacimiento = usuario.FechaNacimiento;                        query.Sexo = usuario.Sexo;                        query.Telefono = usuario.Telefono;                        query.Celular = usuario.Celular;                        query.Curp = usuario.Curp;                        int rowsAffected = context.SaveChanges();                        if (rowsAffected > 0)                        {                            result.Correct = true;                        }                        else                        {                            result.Correct = false;                            result.ErrorMessage = "Error al acutualizar";                        }                    }                    else                    {                        result.Correct = false;                        result.ErrorMessage = "Ocurrio un error al actualizar el usuario";                    }                }            }            catch (Exception ex)            {                result.Correct = false;                result.ErrorMessage = ex.Message;                result.Ex = ex;            }            return result;        }        static public ML.Result DELETELINQ(int IdUsuario)        {            ML.Result result = new ML.Result();            using (DL_EF.ProgramacionNCapasEntities context = new DL_EF.ProgramacionNCapasEntities())            {                var query = (from Usuario in context.Usuarios where Usuario.IdUsuario == IdUsuario select Usuario).Single();                context.Usuarios.Remove(query);                int rowsAffected = context.SaveChanges();                if (rowsAffected > 0)                {                    result.Correct = true;                }                else                {                    result.Correct = false;                    result.ErrorMessage = "Error al Borrar";                }            }

            return result;        }        static public ML.Result GETALLDEF()
        {

            ML.Result result = new ML.Result();            try            {                using (DL_EF.ProgramacionNCapasEntities context = new DL_EF.ProgramacionNCapasEntities())                {                    var query = context.UsuarioRead().ToList();                    if (query != null)                    {                        result.Objects = new List<object>();                        foreach (var objusuario in query)                        {                            ML.Direccion usuario = new ML.Direccion();                            usuario.IdUsuario = new ML.Usuario();                            usuario.IdUsuario.IdUsuario = objusuario.IdUsuario;                            usuario.IdUsuario.UserName = objusuario.UserName;                            usuario.IdUsuario.Nombre = objusuario.Nombre;                            usuario.IdUsuario.ApellidoPaterno = objusuario.ApellidoPaterno;                            usuario.IdUsuario.ApellidoMaterno = objusuario.ApellidoMaterno;                            usuario.IdUsuario.Email = objusuario.Email;                            usuario.IdUsuario.Password = objusuario.Password;                            usuario.IdUsuario.FechaNacimiento = objusuario.FechaNacimiento;                            usuario.IdUsuario.Sexo = objusuario.Sexo;                            usuario.IdUsuario.Telefono = objusuario.Telefono;                            usuario.IdUsuario.Celular = objusuario.Celular;                            usuario.IdUsuario.Curp = objusuario.Curp;                            usuario.IdUsuario.IdRol = new ML.Rol();                            usuario.IdUsuario.IdRol.IdRol = objusuario.IdRol;                            usuario.IdUsuario.IdRol.Nombre = objusuario.Rol;                            usuario.IdDireccion = objusuario.IdDireccion;                            usuario.Calle = objusuario.Calle;                            usuario.NumeroInterior = objusuario.NUmeroInterior;                            usuario.NumeroExterior = objusuario.NUmeroExterior;                            usuario.IdColonia = new ML.Colonia();                            usuario.IdColonia.IdColonia = objusuario.IdColonia;                            usuario.IdColonia.Nombre = objusuario.Colonia;                            usuario.IdColonia.CodigoPostal = objusuario.CodigoPostal;                            usuario.IdColonia.IdMunicipio = new ML.Municipio();                            usuario.IdColonia.IdMunicipio.IdMunicipio = objusuario.IdMUnicipio;                            usuario.IdColonia.IdMunicipio.Nombre = objusuario.Municipio;                            usuario.IdColonia.IdMunicipio.IdEstado = new ML.Estado();                            usuario.IdColonia.IdMunicipio.IdEstado.IdEstado = objusuario.IdEstado;                            usuario.IdColonia.IdMunicipio.IdEstado.Nombre = objusuario.Estado;                            usuario.IdColonia.IdMunicipio.IdEstado.idPais = new ML.Pais();                            usuario.IdColonia.IdMunicipio.IdEstado.idPais.IdPais = objusuario.IdPais;                            usuario.IdColonia.IdMunicipio.IdEstado.idPais.Nombre = objusuario.Pais;                            result.Objects.Add(usuario);                        }                        result.Correct = true;                    }                    else                    {                        result.Correct = false;                        result.ErrorMessage = "No contiene registros la tabla usuario";                    }                }            }            catch (Exception ex)            {                result.Correct = false;                result.ErrorMessage = ex.Message;                result.Ex = ex;            }            return result;        }        static public ML.Result GETBYIDDEF(int IdUsuario)
        {
            ML.Result result = new ML.Result();            try            {                using (DL_EF.ProgramacionNCapasEntities context = new DL_EF.ProgramacionNCapasEntities())                {                    var objusuario = context.GetById(IdUsuario).Single();

                    result.Object = new List<object>();                    if (objusuario != null)                    {


                        ML.Direccion usuario = new ML.Direccion();
                        usuario.IdUsuario = new ML.Usuario();

                        usuario.IdUsuario.UserName = objusuario.UserName;
                        usuario.IdUsuario.Nombre = objusuario.Nombre;
                        usuario.IdUsuario.ApellidoPaterno = objusuario.ApellidoPaterno;
                        usuario.IdUsuario.ApellidoMaterno = objusuario.ApellidoMaterno;
                        usuario.IdUsuario.Email = objusuario.Email;
                        usuario.IdUsuario.Password = objusuario.Password;
                        usuario.IdUsuario.FechaNacimiento = objusuario.FechaNacimiento;
                        usuario.IdUsuario.Sexo = objusuario.Sexo;
                        usuario.IdUsuario.Telefono = objusuario.Telefono;
                        usuario.IdUsuario.Celular = objusuario.Celular;
                        usuario.IdUsuario.Curp = objusuario.Curp;
                        usuario.IdUsuario.IdRol = new ML.Rol();
                        usuario.IdUsuario.IdRol.IdRol = objusuario.IdRol;
                        usuario.IdUsuario.IdRol.Nombre = objusuario.Rol;
                        usuario.IdDireccion = objusuario.IdDireccion;
                        usuario.Calle = objusuario.Calle;
                        usuario.NumeroInterior = objusuario.NUmeroInterior;
                        usuario.NumeroExterior = objusuario.NUmeroExterior;
                        usuario.IdColonia = new ML.Colonia();
                        usuario.IdColonia.IdColonia = objusuario.IdColonia;
                        usuario.IdColonia.Nombre = objusuario.Colonia;
                        usuario.IdColonia.CodigoPostal = objusuario.CodigoPostal;
                        usuario.IdColonia.IdMunicipio = new ML.Municipio();
                        usuario.IdColonia.IdMunicipio.IdMunicipio = objusuario.IdMUnicipio;
                        usuario.IdColonia.IdMunicipio.Nombre = objusuario.Municipio;
                        usuario.IdColonia.IdMunicipio.IdEstado = new ML.Estado();
                        usuario.IdColonia.IdMunicipio.IdEstado.IdEstado = objusuario.IdEstado;
                        usuario.IdColonia.IdMunicipio.IdEstado.Nombre = objusuario.Estado;
                        usuario.IdColonia.IdMunicipio.IdEstado.idPais = new ML.Pais();
                        usuario.IdColonia.IdMunicipio.IdEstado.idPais.IdPais = objusuario.IdPais;
                        usuario.IdColonia.IdMunicipio.IdEstado.idPais.Nombre = objusuario.Pais;                        result.Object = usuario;

                        result.Correct = true;                    }                    else                    {                        result.Correct = false;                        result.ErrorMessage = "Ocurrio un error al actualizar el usuario";                    }                }            }            catch (Exception ex)            {                result.Correct = false;                result.ErrorMessage = ex.Message;                result.Ex = ex;            }            return result;        }

        static public ML.Result GETALLLINQINNER()
        {
            ML.Result result = new ML.Result();
            try
            {
                using (DL_EF.ProgramacionNCapasEntities context = new DL_EF.ProgramacionNCapasEntities())
                {
                    var query = (from Usuario in context.Usuarios 
                                 join Direccion  in context.Direccions on Usuario.IdUsuario equals Direccion.IdUsuario
                                 join Colonia in context.Colonias on Direccion.IdColonia equals Colonia.IdColonia
                                 join Municipio in context.Municipios on Colonia.IdMunicipio equals Municipio.IdMunicipio
                                 join Estado in context.Estadoes on Municipio.IdEstado equals Estado.IdEstado
                                 join Pais in context.Pais on Estado.IDPais equals Pais.IdPais
                                 join Rol in context.Rols on Usuario.IdRol equals Rol.IdRol
                                 select new { Usuario.IdUsuario, Usuario.UserName, Usuario.Nombre, Usuario.ApellidoPaterno, Usuario.ApellidoMaterno, Usuario.Email,
                                 Usuario.Password, Usuario.FechaNacimiento, Usuario.Sexo, Usuario.Telefono, Usuario.Celular, Usuario.Curp, Rol.IdRol, Rol = Rol.Nombre, 
                                 Direccion.IdDireccion, Direccion.Calle, Direccion.NumeroInterior, Direccion.NumeroExterior, Colonia.IdColonia, Colonia = Colonia.Nombre,
                                     Colonia.CodigoPostal, Municipio.IdMunicipio, Municipio =  Municipio.Nombre, Estado.IdEstado, Estado = Estado.Nombre, Pais.IdPais, Pais = Pais.Nombre }).ToList();
                    if (query != null)
                    {
                        result.Objects = new List<object>();
                        foreach (var objusuario in query)
                        {
                            ML.Direccion usuario = new ML.Direccion();
                            usuario.IdUsuario = new ML.Usuario();
                            usuario.IdUsuario.IdUsuario = objusuario.IdUsuario;
                            usuario.IdUsuario.UserName = objusuario.UserName;
                            usuario.IdUsuario.Nombre = objusuario.Nombre;
                            usuario.IdUsuario.ApellidoPaterno = objusuario.ApellidoPaterno;
                            usuario.IdUsuario.ApellidoMaterno = objusuario.ApellidoMaterno;
                            usuario.IdUsuario.Email = objusuario.Email;
                            usuario.IdUsuario.Password = objusuario.Password;
                            usuario.IdUsuario.FechaNacimiento = objusuario.FechaNacimiento;
                            usuario.IdUsuario.Sexo = objusuario.Sexo;
                            usuario.IdUsuario.Telefono = objusuario.Telefono;
                            usuario.IdUsuario.Celular = objusuario.Celular;
                            usuario.IdUsuario.Curp = objusuario.Curp;
                            usuario.IdUsuario.IdRol = new ML.Rol();
                            usuario.IdUsuario.IdRol.IdRol = objusuario.IdRol;
                            usuario.IdUsuario.IdRol.Nombre = objusuario.Rol;
                            usuario.IdDireccion = objusuario.IdDireccion;
                            usuario.Calle = objusuario.Calle;
                            usuario.NumeroExterior = objusuario.NumeroExterior;
                            usuario.NumeroInterior = objusuario.NumeroInterior;
                            usuario.IdColonia = new ML.Colonia();
                            usuario.IdColonia.IdColonia = objusuario.IdColonia;
                            usuario.IdColonia.Nombre = objusuario.Colonia;
                            usuario.IdColonia.IdMunicipio = new ML.Municipio();
                            usuario.IdColonia.IdMunicipio.IdMunicipio = objusuario.IdMunicipio;
                            usuario.IdColonia.IdMunicipio.Nombre = objusuario.Municipio;
                            usuario.IdColonia.IdMunicipio.IdEstado = new ML.Estado();
                            usuario.IdColonia.IdMunicipio.IdEstado.IdEstado = objusuario.IdEstado;
                            usuario.IdColonia.IdMunicipio.IdEstado.Nombre = objusuario.Estado;
                            usuario.IdColonia.IdMunicipio.IdEstado.idPais = new ML.Pais();
                            usuario.IdColonia.IdMunicipio.IdEstado.idPais.IdPais = objusuario.IdPais;
                            usuario.IdColonia.IdMunicipio.IdEstado.idPais.Nombre = objusuario.Pais;

                            result.Objects.Add(usuario);

                        }
                        result.Correct = true;
                    }
                    else {
                        result.Correct = false;
                        result.ErrorMessage = "Error al cargar";
                    }
                }
            }
            catch (Exception ex){ 
            result.Correct=false;
                result.ErrorMessage=ex.Message;
                result.Ex=ex;
            }
            return result;
        }


        static public ML.Result GETBYIDINNER(int IdUsuario)
        {
            ML.Result result = new ML.Result();            try            {                using (DL_EF.ProgramacionNCapasEntities context = new DL_EF.ProgramacionNCapasEntities())                {
                    var objusuario = (from Usuario in context.Usuarios
                                 join Direccion in context.Direccions on Usuario.IdUsuario equals Direccion.IdUsuario
                                 join Colonia in context.Colonias on Direccion.IdColonia equals Colonia.IdColonia
                                 join Municipio in context.Municipios on Colonia.IdMunicipio equals Municipio.IdMunicipio
                                 join Estado in context.Estadoes on Municipio.IdEstado equals Estado.IdEstado
                                 join Pais in context.Pais on Estado.IDPais equals Pais.IdPais
                                 join Rol in context.Rols on Usuario.IdRol equals Rol.IdRol where Usuario.IdUsuario == IdUsuario
                                 select new
                                 {
                                     Usuario.UserName,
                                     Usuario.Nombre,
                                     Usuario.ApellidoPaterno,
                                     Usuario.ApellidoMaterno,
                                     Usuario.Email,
                                     Usuario.Password,
                                     Usuario.FechaNacimiento,
                                     Usuario.Sexo,
                                     Usuario.Telefono,
                                     Usuario.Celular,
                                     Usuario.Curp,
                                     Rol.IdRol,
                                     Rol = Rol.Nombre,
                                     Direccion.IdDireccion,
                                     Direccion.Calle,
                                     Direccion.NumeroInterior,
                                     Direccion.NumeroExterior,
                                     Colonia.IdColonia,
                                     Colonia = Colonia.Nombre,
                                     Colonia.CodigoPostal,
                                     Municipio.IdMunicipio,
                                     Municipio = Municipio.Nombre,
                                     Estado.IdEstado,
                                     Estado = Estado.Nombre,
                                     Pais.IdPais,
                                     Pais = Pais.Nombre
                                 }).Single();

                    result.Object = new List<object>();                    if (objusuario != null)                    {                        
                        ML.Direccion usuario = new ML.Direccion();
                        usuario.IdUsuario = new ML.Usuario();
                        usuario.IdUsuario.UserName = objusuario.UserName;
                        usuario.IdUsuario.Nombre = objusuario.Nombre;
                        usuario.IdUsuario.ApellidoPaterno = objusuario.ApellidoPaterno;
                        usuario.IdUsuario.ApellidoMaterno = objusuario.ApellidoMaterno;
                        usuario.IdUsuario.Email = objusuario.Email;
                        usuario.IdUsuario.Password = objusuario.Password;
                        usuario.IdUsuario.FechaNacimiento = objusuario.FechaNacimiento;
                        usuario.IdUsuario.Sexo = objusuario.Sexo;
                        usuario.IdUsuario.Telefono = objusuario.Telefono;
                        usuario.IdUsuario.Celular = objusuario.Celular;
                        usuario.IdUsuario.Curp = objusuario.Curp;
                        usuario.IdUsuario.IdRol = new ML.Rol();
                        usuario.IdUsuario.IdRol.IdRol = objusuario.IdRol;
                        usuario.IdUsuario.IdRol.Nombre = objusuario.Rol;
                        usuario.IdDireccion = objusuario.IdDireccion;
                        usuario.Calle = objusuario.Calle;
                        usuario.NumeroExterior = objusuario.NumeroExterior;
                        usuario.NumeroInterior = objusuario.NumeroInterior;
                        usuario.IdColonia = new ML.Colonia();
                        usuario.IdColonia.IdColonia = objusuario.IdColonia;
                        usuario.IdColonia.Nombre = objusuario.Colonia;
                        usuario.IdColonia.IdMunicipio = new ML.Municipio();
                        usuario.IdColonia.IdMunicipio.IdMunicipio = objusuario.IdMunicipio;
                        usuario.IdColonia.IdMunicipio.Nombre = objusuario.Municipio;
                        usuario.IdColonia.IdMunicipio.IdEstado = new ML.Estado();
                        usuario.IdColonia.IdMunicipio.IdEstado.IdEstado = objusuario.IdEstado;
                        usuario.IdColonia.IdMunicipio.IdEstado.Nombre = objusuario.Estado;
                        usuario.IdColonia.IdMunicipio.IdEstado.idPais = new ML.Pais();
                        usuario.IdColonia.IdMunicipio.IdEstado.idPais.IdPais = objusuario.IdPais;
                        usuario.IdColonia.IdMunicipio.IdEstado.idPais.Nombre = objusuario.Pais;

                        result.Objects.Add(usuario);                        result.Object = usuario;                        result.Correct = true;                    }                    else                    {                        result.Correct = false;                        result.ErrorMessage = "Ocurrio un error al actualizar el usuario";                    }                }            }            catch (Exception ex)            {                result.Correct = false;                result.ErrorMessage = ex.Message;                result.Ex = ex;            }            return result;
        }
    }    }